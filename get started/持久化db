容器的文件系统
当容器运行时，它将镜像中的各个层用于其文件系统。每个容器还获得自己的“暂存空间”来创建/更新/删除文件。任何更改都不会在另一个容器中看到，即使他们使用的是相同的镜像。

在实践中看到这一点
要看到这一点，我们将启动两个容器，并在每个容器中创建一个文件。您将看到，在一个容器中创建的文件在另一个容器中不可用。
1、启动ubuntu容器，它将创建一个名为/data.txt的文件，带有一个1到10000的随机数。
 docker run -d ubuntu bash -c "shuf -i 1-10000 -n 1 -o /data.txt && tail -f /dev/null"
如果您对命令感到好奇，我们将启动一个bash shell并调用两个命令(为什么我们有&&)。第一部分选取单个随机数并将其写入/data.txt第二个命令只是监视一个文件，以保持容器运行。
2、验证我们可以通过以下方式查看输出exec进入容器。要执行此操作，请打开仪表板，然后单击正在运行ubuntu镜像。
您将看到一个终端正在ubuntu容器中运行shell。执行以下命令，查看/data.txt文件。之后再次关闭此终端。
 cat /data.txt
如果您喜欢命令行，您可以使用docker exec命令执行同样的操作。您需要获取容器的ID(使用docker ps获取它)，并使用以下命令获取内容。
 docker exec <container-id> cat /data.txt
你应该看到一个随机数！
3、现在，让我们开始另一个ubuntu容器（相同的镜像），我们将看到我们没有相同的文件。
 docker run -it ubuntu ls /
 看！没有data.txt文件在那里！这是因为它只写入了第一个容器的暂存空间。
4、继续，使用docker rm -f <container-id>命令。

容器卷
在前面的实验中，我们看到每个容器每次启动时都从图像定义开始。虽然容器可以创建、更新和删除文件，但当容器被删除时，这些更改将丢失，并且所有更改都将隔离到该容器。有了卷，我们可以改变所有这些。
Volumes提供将容器的特定文件系统路径连接回宿主机的能力。如果装载了容器中的目录，则在宿主机上也会看到该目录中的更改。如果我们在容器重新启动时装载相同的目录，我们将看到相同的文件。
主要有两种类型的卷。我们最终会使用两种卷，但先从named volumes开始。












